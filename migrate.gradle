final def JAVASOURCE_FOLDER = 'javasource'

// required for preventing svn: E155004 - errors
gradle.startParameter.maxWorkerCount = 1

allprojects { prj ->

    task('migrateSrcStructure_main_java') {

        onlyIf {new File(prj.projectDir, JAVASOURCE_FOLDER).exists()}

        def files = prj.fileTree JAVASOURCE_FOLDER, {
            include '**/*.java'

            if (prj.name.endsWith('_test')) {
                exclude 'tests/com/**/*.java'
            }
            else {
                exclude 'tests/**/*.java'
            }
        }

        doLast() {
            moveFiles prj, JAVASOURCE_FOLDER, 'src/main/java', files
        }
    }

    task('migrateSrcStructure_test_java') {

        onlyIf {new File(prj.projectDir, JAVASOURCE_FOLDER).exists()}

        def files = prj.fileTree "$JAVASOURCE_FOLDER", {
            if (prj.name.endsWith('_test')) {
                include 'tests/com/**/*.java'
            }
            else {
                include 'tests/**/*.java'
            }
        }

        doLast() {
            moveFiles prj, JAVASOURCE_FOLDER, 'src/test/java', files
        }
    }

    task('migrateSrcStructure_main_res') {

        onlyIf {new File(prj.projectDir, JAVASOURCE_FOLDER).exists()}

        def files = prj.name.endsWith('_test') ?
                prj.fileTree("$JAVASOURCE_FOLDER", {
                    include '**/*'
                    exclude '**/*.java'
                }):
                prj.fileTree("$JAVASOURCE_FOLDER", {
                    include '**/*'
                    exclude '**/*.java'
                    exclude 'resources/tests/**/*'
                })

        doLast() {
            moveFiles prj, JAVASOURCE_FOLDER, 'src/main/resources', files
        }
    }

    task('migrateSrcStructure_test_res') {

        onlyIf {new File(prj.projectDir, JAVASOURCE_FOLDER).exists()}
        onlyIf {!prj.name.endsWith('_test')}

        def files = prj.fileTree "$JAVASOURCE_FOLDER", {
            include 'resources/tests/**/*'
        }

        doLast() {
            moveFiles prj, JAVASOURCE_FOLDER, 'src/test/resources', files
        }
    }

    task('migrate_genmodel') {

        def files = prj.fileTree "model", {
            include '**/*.genmodel'
        }

        doLast() {
            replaceToken files.files, JAVASOURCE_FOLDER, 'src/test/java'
        }
    }

    task('migrate_javacc') {
        File buildFile = new File(prj.projectDir, 'build.gradle')

        onlyIf {buildFile.exists()}

        doLast() {
            def content = buildFile.text.replaceAll(/javasource(.*\.jjt?)/, {all, path -> "src/main/resources$path"})

            buildFile.write content
        }
    }

    task('migrate') {
        dependsOn   migrateSrcStructure_main_java,
                    migrateSrcStructure_test_java,
                    migrateSrcStructure_main_res,
                    migrateSrcStructure_test_res,
                    migrate_genmodel,
                    migrate_javacc

        onlyIf {new File(prj.projectDir, JAVASOURCE_FOLDER).exists()}

        doLast() {

            // check, if all files were migrated
            def migrated = []

            [prj.fileTree('src/main/java'),
             prj.fileTree('src/main/resources'),
             prj.fileTree('src/test/java'),
             prj.fileTree('src/test/resources')
            ].each {
                it.visit {FileTreeElement fte ->
                    migrated += fte.relativePath.pathString
                }
            }

            prj.fileTree(JAVASOURCE_FOLDER).visit {FileTreeElement fte ->
                if (!fte.isDirectory() && !migrated.contains(fte.relativePath.pathString)) {
                    throw new GradleException("some file are not migrated: ${fte.relativePath.pathString}")
                }
            }

            deleteFiles prj, JAVASOURCE_FOLDER
        }
    }

    def migrate_test_java = task('migrate_test_java') {
        dependsOn migrate

        def files = prj.fileTree "$JAVASOURCE_FOLDER", {
            include 'tests/com/**/*.java'
        }

        doLast() {
            moveFiles prj, JAVASOURCE_FOLDER, 'src/test/java', files
        }
    }
}


def deleteFiles(Project prj, String path) {
    svnDelete prj, path
}


def moveFiles(Project prj, src, target, files) {
    File targetDir = new File(prj.projectDir, target)

    if (!targetDir.exists()) {
        targetDir.parentFile.mkdirs()

        svnCopy prj, src, target
    } else {
        files.visit { FileTreeElement fte ->
            if (!(new File(targetDir, fte.relativePath.pathString).exists())) {

                if (fte.isDirectory())
                    svnCopy(prj, "$src/${fte.relativePath}", "$target/${fte.relativePath}")
                else
                    svnMove(prj, "$src/${fte.relativePath}", "$target/${fte.relativePath}")
            }
        }
    }

    Set remainingFiles = []
    files.visit { FileTreeElement fte ->
            remainingFiles += fte.relativePath
    }

    prj.fileTree(target).visit {FileTreeElement fte ->
        if (!remainingFiles.contains(fte.relativePath)) {
            svnDelete prj, "$target/${fte.path}"
        }
    }

    def directories = []
    prj.fileTree(target).visit { FileTreeElement fte ->
        if (fte.isDirectory()) directories += fte
    }

    directories.sort({a,b -> b.relativePath <=> a.relativePath})

    directories.each {FileTreeElement dir ->
        if (dir.file.listFiles().size() == 0)
            svnDelete prj, "$target/${dir.path}"
    }
}


def svnMove(Project prj, source, dest) {

    if (prj.hasProperty('MOCK_SCM')) {
        prj.copy {
            from source
            into dest
        }
        prj.delete source
    } else {
        println "svn move $source $dest"
        prj.exec {
            if (System.getProperty('os.name').toLowerCase().contains('windows')) {
                commandLine 'cmd', '/c', 'svn', 'move', '--parents', source, dest
            } else {
                commandLine 'sh', '-c', "svn move --parents $source $dest"
            }
        }
    }
}


def svnCopy(Project prj, source, dest) {

    if (prj.hasProperty('MOCK_SCM')) {
        prj.copy {
            from source
            into dest
        }
        prj.delete source
    } else {
        println "svn copy $source $dest"
        prj.exec {
            if (System.getProperty('os.name').toLowerCase().contains('windows')) {
                commandLine 'cmd', '/c', 'svn', 'copy', '--parents', source, dest
            } else {
                commandLine 'sh', '-c', "svn copy --parents $source $dest"
            }
        }
    }
}


def svnDelete(Project prj, path) {
    if (prj.hasProperty('MOCK_SCM')) {
        prj.delete path
    } else {
        println "svn delete $path"
        prj.exec {
            if (System.getProperty('os.name').toLowerCase().contains('windows')) {
                commandLine 'cmd', '/c', 'svn', 'delete', path
            } else {
                commandLine 'sh', '-c', "svn delete $path"
            }
        }
    }
}


def replaceToken(Set<File> files, def pattern, def replaceWith) {
    files.each {f ->

        def content = f.text
                .replaceAll(pattern, replaceWith)

        f.write content
    }
}




